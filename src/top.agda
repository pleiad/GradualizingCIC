{-# OPTIONS --without-K --prop #-}
module top where

open import prelude

import Relation.Unary as RU

open import Relation.Binary.Core
open import Relation.Binary.Structures

open import Poset

-- Negative ‚ä§

module _ where
  private
    variable
      A : Set

  ‚ä§Œµ : ‚ä§ ‚Üí A ‚Üí Set
  ‚ä§Œµ _ _ = ‚ä§

  ‚ä§Œµ-hprop : Irrelevant (‚ä§Œµ {A})
  ‚ä§Œµ-hprop _ _ = erefl

  ?‚ä§Œµ : {a : A} (x : ‚ä§) ‚Üí ‚ä§Œµ {A} x a
  ?‚ä§Œµ _ = tt

  ‚ú†‚ä§Œµ : (a : A) ‚Üí ‚ä§Œµ tt a
  ‚ú†‚ä§Œµ _ = tt

  ‚ä§·µñ : Poset‚ÇÄ ‚ä§
  ‚ä§·µñ = record
    { _‚äë_ = ‚ä§Œµ
    ; isPoset = record
    { isPreorder = record
      { isEquivalence = PE.isEquivalence
      ; reflexive = Œª x ‚Üí tt
      ; trans = Œª x x‚ÇÅ ‚Üí tt }
      ; antisym = Œª _ _ ‚Üí erefl }
    ; ‚äë-hProp = Œª a b ‚Üí erefl
    ; carrier-hSet = hedberg Œª { tt tt ‚Üí yes erefl } }


  private
    instance
      P‚ä§ = ‚ä§·µñ

  ‚ú†‚ä§ : Initial ‚ä§
  ‚ú†‚ä§ = record
         { bot = tt
         ; is-bot = Œª _ ‚Üí ùüô
         ; is-bot-spec = Œª hbot ‚Üí erefl
         ; bot-is-bot = ‚ü®‚ü©
         ; bot-min = Œª hbot ‚Üí tt
         ; bot-smallest = Œª bb' x ‚Üí ‚ü®‚ü©
         }

  ?‚ä§ : Final ‚ä§
  ?‚ä§ = record
    { top = tt
    ; is-top = Œª _ ‚Üí ùüô
    ; is-top-spec = Œª htop ‚Üí erefl
    ; top-is-top = ‚ü®‚ü©
    ; top-max = Œª htop ‚Üí tt
    ; top-greatest = Œª bb' x ‚Üí ‚ü®‚ü©
    }

  module ‚ä§Œµ-Distr {{PA : Poset‚ÇÄ A}} (botA : A) (botA-min : (a : A) ‚Üí botA ‚äë a) where

    pf : PosetDistr.IsRepresentablePosetDistr ‚ä§ A ‚ä§Œµ
    pf = record
      { isPosetDistr = record {
        act-left = Œª x x‚ÇÅ ‚Üí tt ;
        act-right = Œª x x‚ÇÅ ‚Üí tt ;
        distr-hProp = Œª a b ‚Üí erefl }
      ; isLeftRepresentable = record {
        up = record { fun = Œª x ‚Üí botA ; monotone = Œª x ‚Üí refl } ;
        up-repr-from = Œª {_} {a} x ‚Üí botA-min a ;
        up-repr-to = Œª x ‚Üí tt }
      ; isRightRepresentable = record {
        down = record { fun = Œª x ‚Üí tt ; monotone = Œª x ‚Üí tt } ;
        down-repr-from = Œª x ‚Üí tt ;
        down-repr-to = Œª x ‚Üí tt }
      }

    ‚ä§-distr : Distr ‚ä§ A
    ‚ä§-distr = record { distr = ‚ä§Œµ ; isDistr = pf ; up-down-inverseÀ° = Œª { tt ‚Üí erefl } }

