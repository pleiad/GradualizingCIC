{-# OPTIONS --without-K --prop --rewriting #-}
module Unknown.Core where

open import prelude
open PE hiding (_‚â°_)
import Unknown.Quotient
open import Unknown.Interface


data Œ£‚Å∫ {l l' : Level} (A : Set l) (B : A ‚Üí Set l') : Set (l ‚äî l') where
  inj : ‚àÄ a ‚Üí B a ‚Üí Œ£‚Å∫ A B
  ?Œ£ : Œ£‚Å∫ A B
  ‚ú†Œ£ : Œ£‚Å∫ A B

module Œ£‚Å∫-hSet (fp : familyPack) where

  open familyPack fp

  private
    eqinj : (c c' : A) (x : B c) (x' : B c') ‚Üí Set
    eqinj c c' x x' = Œ£[ h ‚àà c ‚â° c' ] subst B h x ‚â° x'

    inj-eqinj : {c c' : A} {x : B c} {x' : B c'} ‚Üí inj c x ‚â° inj c' x' ‚Üí eqinj c c' x x'
    inj-eqinj refl = refl , refl

    eqinj-inj : {c c' : A} {x : B c} {x' : B c'} ‚Üí eqinj c c' x x' ‚Üí inj c x ‚â° inj c' x'
    eqinj-inj (refl , refl) = refl

    inj-eqinj-id : {c c' : A} {x : B c} {x' : B c'} (h : inj c x ‚â° inj c' x') ‚Üí h ‚â° eqinj-inj (inj-eqinj h)
    inj-eqinj-id refl = refl

    eqinj-injective : {c c' : A} {x : B c} {x' : B c'} (h h' : inj c x ‚â° inj c' x') ‚Üí inj-eqinj h ‚â° inj-eqinj h' ‚Üí h ‚â° h'
    eqinj-injective h h' hh' = trans (inj-eqinj-id h) (trans (cong eqinj-inj hh') (sym (inj-eqinj-id h')))

  Œ£‚Å∫-hSet : hSet (Œ£‚Å∫ A B)
  Œ£‚Å∫-hSet {inj c x} {inj c' x'} eq eq' with inj-eqinj eq with inspect inj-eqinj eq with inj-eqinj eq' with inspect inj-eqinj eq'
  ... | (h‚ÇÅ , h‚ÇÇ) | [ eqh ] | (h'‚ÇÅ , h'‚ÇÇ) | [ eqh' ] rewrite hedberg decA h‚ÇÅ h'‚ÇÅ rewrite hSetB c' h‚ÇÇ h'‚ÇÇ =
    eqinj-injective eq eq' (trans eqh (sym eqh'))
  Œ£‚Å∫-hSet {?Œ£} {y} = local-hedberg ?Œ£ dec
    where
      dec : RU.Decidable (_‚â°_ (?Œ£ {A = A} {B = B}))
      dec (inj a x) = no Œª()
      dec ?Œ£ = yes refl
      dec ‚ú†Œ£ = no Œª()
  Œ£‚Å∫-hSet {‚ú†Œ£} {y} = local-hedberg ‚ú†Œ£ dec
    where
      dec : RU.Decidable (_‚â°_ (‚ú†Œ£ {A = A} {B = B}))
      dec (inj a x) = no Œª()
      dec ?Œ£ = no Œª()
      dec ‚ú†Œ£ = yes refl


record pointedFamilyPack : Set‚ÇÅ where
  field
    fp : familyPack {lzero} {lzero}
  open familyPack fp public

  field
    is‚ú†  : (a : A) ‚Üí B a ‚Üí Prop
    is‚ú†-eq : (a : A) (b b' : B a) (hb : is‚ú† a b) (hb' : is‚ú† a b') ‚Üí b ‚â° b'


module UnknownType (pfp : pointedFamilyPack) where

  open pointedFamilyPack pfp

  private
    ‚ú†Œ£‚Å∫ : Œ£‚Å∫ A B ‚Üí Prop
    ‚ú†Œ£‚Å∫ (inj a x) = is‚ú† a x
    ‚ú†Œ£‚Å∫ ?Œ£ = ùüò
    ‚ú†Œ£‚Å∫ ‚ú†Œ£ = ùüô


    data ‚ú†rel‚ÇÄ : Œ£‚Å∫ A B ‚Üí Œ£‚Å∫ A B ‚Üí Set where
      ‚ú†rel-refl : {x : Œ£‚Å∫ A B} ‚Üí ‚ú†rel‚ÇÄ x x
      ‚ú†rel-‚ú† : {x y : Œ£‚Å∫ A B} (xyneq : x ‚â° y ‚Üí ùüò) (hx : ‚ú†Œ£‚Å∫ x) (hy : ‚ú†Œ£‚Å∫ y) ‚Üí ‚ú†rel‚ÇÄ x y

    Œ£hSet = Œ£‚Å∫-hSet.Œ£‚Å∫-hSet fp

    ‚ú†rel‚ÇÄ-eq-elim : {x y : Œ£‚Å∫ A B} (h : x ‚â° y) (xy : ‚ú†rel‚ÇÄ x y) ‚Üí xy ‚â° PE.subst (‚ú†rel‚ÇÄ x) h ‚ú†rel-refl
    ‚ú†rel‚ÇÄ-eq-elim h ‚ú†rel-refl rewrite Œ£hSet h refl = refl
    ‚ú†rel‚ÇÄ-eq-elim h (‚ú†rel-‚ú† xyneq hx hy) = absurd (xyneq h)

    ‚ú†rel‚ÇÄ-irr : Irrelevant ‚ú†rel‚ÇÄ
    ‚ú†rel‚ÇÄ-irr ‚ú†rel-refl h' = PE.sym (‚ú†rel‚ÇÄ-eq-elim refl h')
    ‚ú†rel‚ÇÄ-irr (‚ú†rel-‚ú† xyneq hx hy) ‚ú†rel-refl = absurd (xyneq refl)
    ‚ú†rel‚ÇÄ-irr (‚ú†rel-‚ú† xyneq hx hy) (‚ú†rel-‚ú† xyneq‚ÇÅ hx‚ÇÅ hy‚ÇÅ) = refl

    open import Relation.Binary.Structures using (IsEquivalence)

    ‚ú†rel‚ÇÄ-refl : Reflexive ‚ú†rel‚ÇÄ
    ‚ú†rel‚ÇÄ-refl = ‚ú†rel-refl

    ‚ú†rel‚ÇÄ-sym : Symmetric ‚ú†rel‚ÇÄ
    ‚ú†rel‚ÇÄ-sym xx@‚ú†rel-refl = xx
    ‚ú†rel‚ÇÄ-sym (‚ú†rel-‚ú† xyneq hx hy) = ‚ú†rel-‚ú† (Œª h ‚Üí xyneq (sym h)) hy hx

    dec-eq-‚ú†Œ£‚Å∫ : (x y : Œ£‚Å∫ A B) (hx : ‚ú†Œ£‚Å∫ x) (hy : ‚ú†Œ£‚Å∫ y) ‚Üí Dec (x ‚â° y)
    dec-eq-‚ú†Œ£‚Å∫ (inj a x) (inj a' x') hx hy with decA a a'
    ... | yes refl = yes (PE.cong (inj a) (is‚ú†-eq a x x' hx hy))
    ... | no h = no Œª { refl ‚Üí h refl }
    dec-eq-‚ú†Œ£‚Å∫ (inj a x) ‚ú†Œ£ hx hy = no (Œª())
    dec-eq-‚ú†Œ£‚Å∫ ‚ú†Œ£ (inj a x) hx hy = no (Œª())
    dec-eq-‚ú†Œ£‚Å∫ ‚ú†Œ£ ‚ú†Œ£ hx hy = yes refl

    ‚ú†rel‚ÇÄ-trans : Transitive ‚ú†rel‚ÇÄ
    ‚ú†rel‚ÇÄ-trans ‚ú†rel-refl yz = yz
    ‚ú†rel‚ÇÄ-trans xy@(‚ú†rel-‚ú† xyneq hx hy) ‚ú†rel-refl = xy
    ‚ú†rel‚ÇÄ-trans (‚ú†rel-‚ú† {x} _ hx _) (‚ú†rel-‚ú† {y = z} _ _ hz) with dec-eq-‚ú†Œ£‚Å∫ x z hx hz
    ... | yes refl = ‚ú†rel-refl
    ... | no h = ‚ú†rel-‚ú† (neg-Prop h) hx hz

    ‚ú†rel‚ÇÄ-equiv : IsEquivalence ‚ú†rel‚ÇÄ
    ‚ú†rel‚ÇÄ-equiv = record { refl = ‚ú†rel‚ÇÄ-refl ; sym = ‚ú†rel‚ÇÄ-sym ; trans = ‚ú†rel‚ÇÄ-trans }


  ‚ú†rel-helper : Rel (Œ£‚Å∫ A B) lzero
  ‚ú†rel-helper (inj a x) ‚ú†Œ£ = Box (is‚ú† a x)
  ‚ú†rel-helper _ _ = Empty

  private
    to‚ú†rel‚ÇÄ : ‚ú†rel-helper ‚áí ‚ú†rel‚ÇÄ
    to‚ú†rel‚ÇÄ {inj a x} {‚ú†Œ£} hx = ‚ú†rel-‚ú† (Œª()) (unbox hx) ‚ü®‚ü©

    open import Relation.Binary.Construct.Closure.Equivalence as CCEq
    open import Relation.Binary.Construct.Closure.Symmetric as CCSym
    open import Relation.Binary.Construct.Closure.ReflexiveTransitive as CCRT

    ret : ‚àÄ {l l'} {A : Set l} {R : Rel A l'} ‚Üí R ‚áí EqClosure R
    ret xy = return (fwd xy)

    from‚ú†rel‚ÇÄ : ‚ú†rel‚ÇÄ ‚áí EqClosure ‚ú†rel-helper
    from‚ú†rel‚ÇÄ ‚ú†rel-refl = reflexive _
    from‚ú†rel‚ÇÄ {inj a x} {inj a‚ÇÅ x‚ÇÅ} (‚ú†rel-‚ú† xyneq hx hy) =
      transitive _ (ret ‚ü¶ hx ‚üß) (CCEq.symmetric _ (ret ‚ü¶ hy ‚üß))
    from‚ú†rel‚ÇÄ {inj a x} {‚ú†Œ£} (‚ú†rel-‚ú† xyneq hx hy) = ret ‚ü¶ hx ‚üß
    from‚ú†rel‚ÇÄ {‚ú†Œ£} {inj a x} (‚ú†rel-‚ú† xyneq hx hy) =
      CCEq.symmetric _ (ret ‚ü¶ hy ‚üß)
    from‚ú†rel‚ÇÄ {‚ú†Œ£} {‚ú†Œ£} (‚ú†rel-‚ú† xyneq hx hy) = reflexive _

    module Q = Unknown.Quotient (Œ£‚Å∫ A B) ‚ú†rel‚ÇÄ

  unknown : Set
  unknown = Q._/_

  ‚¶Ö_‚¶Ü : Œ£‚Å∫ A B ‚Üí unknown
  ‚¶Ö_‚¶Ü = Q.‚¶Ö_‚¶Ü

  uinj : (a : A) ‚Üí B a ‚Üí unknown
  uinj a b = Q.‚¶Ö inj a b ‚¶Ü

  ?u : unknown
  ?u = ‚¶Ö ?Œ£ ‚¶Ü

  ‚ú†u : unknown
  ‚ú†u = ‚¶Ö ‚ú†Œ£ ‚¶Ü

  uinj‚ú† : (c : A) (x : B c) (h‚ú† : is‚ú† c x) ‚Üí uinj c x ‚â° ‚ú†u
  uinj‚ú† c x h‚ú† = Q.quot (‚ú†rel-‚ú† (Œª()) h‚ú† ‚ü®‚ü©)

  unknown-hSet : hSet unknown
  unknown-hSet = Q.quot-hSet Œ£hSet ‚ú†rel‚ÇÄ-irr ‚ú†rel‚ÇÄ-equiv

  quot-elim : ‚àÄ {l} (P : unknown ‚Üí Set l) (hŒ£ : ‚àÄ a ‚Üí P ‚¶Ö a ‚¶Ü) ‚Üí Set l
  quot-elim P hŒ£ = (a : A) (x : B a) (hx : is‚ú† a x) ‚Üí
                    subst P (uinj‚ú† a x hx) (hŒ£ (inj a x)) ‚â° hŒ£ ‚ú†Œ£

  module _ {l} (P : unknown ‚Üí Set l)
                (hŒ£ : ‚àÄ a ‚Üí P ‚¶Ö a ‚¶Ü)
                (hquot : quot-elim P hŒ£)
                where
    private
      open Q.QuotSimpl unknown-hSet ‚ú†rel‚ÇÄ-equiv ‚ú†rel-helper to‚ú†rel‚ÇÄ from‚ú†rel‚ÇÄ P hŒ£

      aux : ‚àÄ {x x'} (h : ‚ú†rel-helper x x') ‚Üí Q./elim-eq-hyp P hŒ£ {x} {x'} (to‚ú†rel‚ÇÄ h)
      aux {inj a x} {‚ú†Œ£} h = hquot a x (unbox h)


    /elim : (u : unknown) ‚Üí P u
    /elim = Q./elim P hŒ£ (qsimpl aux)

  module _ {l} (P : Set l) (hŒ£ : Œ£‚Å∫ A B ‚Üí P) where

    quot-rec : Set l
    quot-rec = (a : A) (x : B a) (hx : is‚ú† a x) ‚Üí hŒ£ (inj a x) ‚â° hŒ£ ‚ú†Œ£

    /rec : (hquot : quot-rec) ‚Üí unknown ‚Üí P
    /rec hquot = /elim (Œª _ ‚Üí P) hŒ£
      Œª a x hx ‚Üí trans (subst-const (uinj‚ú† a x hx)) (hquot a x hx)

  is‚ú†u : (u : unknown) ‚Üí Prop
  is‚ú†u u = Squash (/rec Set (Œª {
    (inj a x) ‚Üí Box (is‚ú† a x) ;
    ?Œ£ ‚Üí Box ùüò ;
    ‚ú†Œ£ ‚Üí Box ùüô})
    (Œª a x hx ‚Üí hpropext Box-hprop Box-hprop (Œª _ ‚Üí ‚ü¶ ‚ü®‚ü© ‚üß) (Œª _ ‚Üí ‚ü¶ hx ‚üß)) u)

  is‚ú†‚ú†u : is‚ú†u ‚ú†u
  is‚ú†‚ú†u = toSquashBox ‚ü®‚ü©

  is‚ú†u-uinj : (a : A) (x : B a) (hx : is‚ú† a x) ‚Üí is‚ú†u (uinj a x)
  is‚ú†u-uinj a x hx = toSquashBox hx

  private
    flip-subst-‚â° : {A : Set} (P : A ‚Üí Set) {a b : A} (x : P a) (y : P b) (eq : a ‚â° b) ‚Üí x ‚â° subst P (sym eq) y ‚Üí subst P eq x ‚â° y
    flip-subst-‚â° P x y refl = id


  is‚ú†u-eq : (u : unknown) (h‚ú† : is‚ú†u u) ‚Üí u ‚â° ‚ú†u
  is‚ú†u-eq u h‚ú† = /elim Ptop auxtop
    (Œª a x h' ‚Üí flip-subst-‚â° Ptop _ _ (uinj‚ú† a x h')
         (funext ((Œª {‚ü¶ _ ‚üß ‚Üí  simpl-eq _ _ _})))) u ‚ü¶ h‚ú† ‚üß
    where
      Ptop = Œª (u : unknown) ‚Üí Box (is‚ú†u u) ‚Üí u ‚â° ‚ú†u
      auxtop : ( u : Œ£‚Å∫ A B) ‚Üí Ptop ‚¶Ö u ‚¶Ü
      auxtop (inj a x) ‚ü¶ h ‚üß = uinj‚ú† a x (SquashBox h)
      auxtop ?Œ£ ‚ü¶ h ‚üß = absurd (SquashBox h)
      auxtop ‚ú†Œ£ _ = refl

      simpl-eq : {A : Set} {x y : A} (eq : x ‚â° y) (P : A ‚Üí Set) (p : P x) ‚Üí
               eq ‚â° subst (Œª a ‚Üí P a ‚Üí a ‚â° y) (sym eq) (Œª _ ‚Üí refl) p
      simpl-eq refl P r = refl
