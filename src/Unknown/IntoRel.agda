{-# OPTIONS --without-K --prop --rewriting #-}

open import prelude
open PE hiding (_‚â°_)
open import Unknown.Core
import Poset as P
open P.Initial
open P.Final
import Unknown.Interface as I

module Unknown.IntoRel (fp : I.familyPack)
                       {{PB : ‚àÄ {c} ‚Üí P.Poset‚ÇÄ (I.familyPack.B fp c)}}
                       (‚ú†B : ‚àÄ {c} ‚Üí P.Initial (I.familyPack.B fp c))
                       where

open import Unknown.Rel fp ‚ú†B

iDDB : (c : A) ‚Üí intoDomData
iDDB c = record {
    X = B c;
    cx = c;
    XŒµ = P._‚äë_ {{PB {c}}};
    is‚ú†X = P.is-bot ‚ú†B;
    ‚ú†X-min = P.bot-min ‚ú†B;
    ‚ú†X-smallest = P.bot-smallest ‚ú†B;
    XŒµ-hprop = P.‚äë-hProp {{PB {c}}}
  }

private
  decA-refl : (a : A) ‚Üí decA a a ‚â° yes erefl
  decA-refl a = decEq-refl decA {a} erefl

  decA-neq = decEq-neq decA

  instance
    PUnkown = unknown·µñ

module IntoUnknownCompat (iDD : intoDomData) where

  open intoDomData iDD
  open IntoUnknown iDD

  module IU (c : A) = IntoUnknown (iDDB c)


  open P.Initial

  uinj-uŒµ-inv : (c : A) (x : B c) (u : unknown) ‚Üí uŒµ (uinj c x) u ‚Üí IU.intoUnkŒµ c x u
  uinj-uŒµ-inv c x = /elim P aux aux-quot
    where
      P = Œª (u : unknown) ‚Üí uŒµ (uinj c x) u ‚Üí IU.intoUnkŒµ c x u
      aux : (u : Œ£‚Å∫ A B) ‚Üí P ‚¶Ö u ‚¶Ü
      aux (inj c' x') cxu with decA c' c
      ... | yes refl rewrite decA-refl c' = cxu
      ... | no h rewrite decA-neq _ _ h = cxu
      aux ?Œ£ cxu = IU.??max-intoUnkŒµ c {x}
      aux ‚ú†Œ£ cxu = IU.‚ú†min-intoUnkŒµ c {x} ‚ú†u (SquashBox (‚ú†unk .bot-smallest {uinj c x} {‚ú†u} cxu is‚ú†‚ú†u))

      aux-quot : quot-elim P aux
      aux-quot a _ x‚ÇÅ = funext (Œª _ ‚Üí IU.intoUnkŒµ-hprop c {x} {‚ú†u} _ _)

  private
    BŒµ = Œª {c} ‚Üí P._‚äë_ {{PB {c}}}
    -- reflB = Œª c {x} ‚Üí P.refl {{PB {c}}} {x}
    -- BŒµ-hprop = Œª {c} {x} {y} ‚Üí P.‚äë-hProp  {{PB {c}}} {x} {y}
    -- ‚ú†min = Œª {c} {b} {b'} ‚Üí P.bot-min (‚ú†B {c}) {b} {b'}
    -- ‚ú†smallest = Œª {c} {b} {b'} ‚Üí P.bot-smallest (‚ú†B {c}) {b} {b'}

  compat : (transXŒµ : ‚àÄ {x b b'}(xb : XŒµ x b)(bb' : BŒµ b b') ‚Üí XŒµ x b')
            {x : X} {u u' : unknown} ‚Üí intoUnkŒµ x u ‚Üí uŒµ u u' ‚Üí intoUnkŒµ x u'
  compat transXŒµ {x} {u} {u'} = /elim Ptop auxtop auxtop-quot u u'
    where
      P = Œª (x' : B cx)(u' : unknown)‚Üí
          (xu : XŒµ x x')(uu' : uŒµ (uinj cx x') u') ‚Üí intoUnkŒµ x u'
      aux : (x' : B cx)(u' : Œ£‚Å∫ A B) ‚Üí P x' ‚¶Ö u' ‚¶Ü
      aux x' (inj c' x'') xu uu' with decA c' cx
      ... | yes refl rewrite decA-refl c' = transXŒµ xu uu'
      ... | no h rewrite decA-neq _ _ h =
        let h‚ú†u = SquashBox (‚ú†unk .bot-smallest {uinj cx x'} {‚ú†u} uu' (is‚ú†‚ú†u)) in
        ‚ü¶ ‚ú†X-smallest xu h‚ú†u ‚üß
      aux x' ?Œ£ _ _ = tt
      aux x' ‚ú†Œ£ xu uu' =
        let h‚ú†u = SquashBox (‚ú†unk .bot-smallest {uinj cx x'} {‚ú†u} uu' (is‚ú†‚ú†u)) in
        ‚ú†min-intoUnkŒµ ‚ú†u (‚ú†X-smallest xu h‚ú†u)

      aux-quot : (x' : B cx) ‚Üí quot-elim (P x') (aux x')
      aux-quot x' _ _ _ =
        funext (Œª _ ‚Üí funext (Œª _ ‚Üí intoUnkŒµ-hprop {x} {‚ú†u} _ _))

      Ptop = Œª (u : unknown) ‚Üí
        (u' : unknown)(xu : intoUnkŒµ x u)(uu' : uŒµ u u') ‚Üí intoUnkŒµ x u'
      auxtop : (u : Œ£‚Å∫ A B) ‚Üí Ptop ‚¶Ö u ‚¶Ü
      auxtop (inj c' x') u' xu uu' with decA c' cx
      ... | yes refl = /elim (P x') (aux x') (aux-quot x') u' xu uu'
      ... | no h = ‚ú†min-intoUnkŒµ u' (unbox xu)
      auxtop ?Œ£ u' _ uu' rewrite (u?Œµ-inv u' uu') = tt
      auxtop ‚ú†Œ£ u' xu _ =
        ‚ú†min-intoUnkŒµ u' (‚ú†smallest-intoUnkŒµ {u = ‚ú†u} xu (is‚ú†‚ú†u))

      auxtop-quot : quot-elim Ptop auxtop
      auxtop-quot _ _ _ =
        funext (Œª u' ‚Üí funext (Œª _ ‚Üí funext (Œª _ ‚Üí intoUnkŒµ-hprop {x} {u'} _ _)))


intoDistrData = I.intoDistrData fp ‚ú†B


module _ (c : A) (d : intoDistrData c) where
  open P.Distr
--  open P.IsRepresentablePosetDistr
  open P._‚áí-Poset_
  open P.Initial
  open P.Final

  open I.intoDistrData d

  intoDistrDom : intoDomData
  intoDistrDom = record
    { X = X
    ; cx = c
    ; XŒµ = distr XB
    ; is‚ú†X = is-bot ‚ú†X
    ; ‚ú†X-min = P.bot-min-over' {X} {B c} {{PX}} {{PB {c}}} ‚ú†X XB
    ; ‚ú†X-smallest = P.distr-smallest ‚ú†X (‚ú†B {c}) XB down‚ú†
    ; XŒµ-hprop = distr-hProp XB}

  intoDomDistrSelfCompat : intoDomDataCompat intoDistrDom intoDistrDom
  intoDomDistrSelfCompat = record
    { ceq = refl
    ; XY = P._‚äë_
    ; ‚ú†XY-smallest = bot-smallest ‚ú†X
    ; XYcompat = act-left XB }


module IntoDistr (cx : A) (iDiDX : intoDistrData cx) where

  open P.Distr
--  open P.IsRepresentablePosetDistr
  open P._‚áí-Poset_
  open P.Initial
  open P.Final

  open I.intoDistrData iDiDX

  private
    -- isXB = isDistr XB

    iDDX : intoDomData
    iDDX = intoDistrDom cx iDiDX

    iDDXSelfCompat : intoDomDataCompat iDDX iDDX
    iDDXSelfCompat = intoDomDistrSelfCompat cx iDiDX

  open intoDomData iDDX using (XŒµ)

  private
    iDDXBcompat : intoDomDataCompat iDDX (iDDB cx)
    iDDXBcompat = record
      { ceq = refl
      ; XY = XŒµ
      ; ‚ú†XY-smallest = P.distr-smallest ‚ú†X (‚ú†B {cx}) XB down‚ú†
      ; XYcompat = act-right XB }


  open IntoUnknown iDDX


  ùï¶inj : B cx P.‚áí-Poset unknown
  ùï¶inj = record { fun = uinj cx ; monotone = uinj-mon cx }

  from-unknown : unknown ‚Üí X
  from-unknown = /rec X aux aux-quot
    where
      aux-inj : (c : A) (x : B c) ‚Üí X
      aux-inj c x with decA c cx
      ... | yes refl = down XB .fun x
      ... | no _ = bot ‚ú†X

      aux : Œ£‚Å∫ A B ‚Üí X
      aux (inj c x) = aux-inj c x
      aux ?Œ£ = top ?X
      aux ‚ú†Œ£ = bot ‚ú†X

      aux-quot : quot-rec X aux
      aux-quot c x h‚ú† with decA c cx
      ... | yes refl = is-bot-spec ‚ú†X (down‚ú† h‚ú†)
      ... | no _ = refl

  from-unknown-mon : ‚àÄ {u u' : unknown} (uu' : u P.‚äë u') ‚Üí from-unknown u P.‚äë from-unknown u'
  from-unknown-mon {u} {u'} uu' = /elim Ptop auxtop auxtop-quot u u' uu'
    where
      P = Œª (x : B cx)(u' : unknown) ‚Üí (uu' : uŒµ (uinj cx x) u') ‚Üí down XB .fun x P.‚äë from-unknown u'
      aux : (x : B cx)(u' : Œ£‚Å∫ A B) ‚Üí P x ‚¶Ö u' ‚¶Ü
      aux x (inj c' x') with decA c' cx
      ... | yes refl rewrite decA-refl c' = down XB .monotone
      ... | no h rewrite decA-neq _ _ h = Œª h‚ú† ‚Üí bot-min ‚ú†X (down‚ú† (unbox h‚ú†))
      aux x ?Œ£ = Œª _ ‚Üí top-max ?X (top-is-top ?X)
      aux x ‚ú†Œ£ uu' = bot-min ‚ú†X (down‚ú† (SquashBox (‚ú†unk .bot-smallest {uinj cx x} {‚ú†u} uu' is‚ú†‚ú†u)))

      aux-quot : (x : B cx) ‚Üí quot-elim (P x) (aux x)
      aux-quot x c x' h = funext (Œª _ ‚Üí P.‚äë-hProp {{PX}} {down XB .fun x} {from-unknown ‚ú†u} _ _)

      Ptop = Œª (u : unknown) ‚Üí (u' : unknown) (uu' : uŒµ u u') ‚Üí from-unknown u P.‚äë from-unknown u'
      auxtop : (u : Œ£‚Å∫ A B) ‚Üí Ptop ‚¶Ö u ‚¶Ü
      auxtop (inj c x) with decA c cx
      ... | yes refl = /elim (P x) (aux x) (aux-quot x)
      ... | no _ = Œª u' uu' ‚Üí bot-min ‚ú†X (bot-is-bot ‚ú†X)
      auxtop ?Œ£ u' uu' rewrite u?Œµ-inv u' uu' = top-max ?X (top-is-top ?X)
      auxtop ‚ú†Œ£ u' uu' = bot-min ‚ú†X (bot-is-bot ‚ú†X)

      auxtop-quot : quot-elim Ptop auxtop
      auxtop-quot c x' h = funext (Œª u' ‚Üí funext (Œª _ ‚Üí P.‚äë-hProp {{PX}} {from-unknown ‚ú†u} {from-unknown u'} _ _))


  from-unknown-‚ú†u : (u : unknown) ‚Üí is‚ú†u u ‚Üí is-bot ‚ú†X (from-unknown u)
  from-unknown-‚ú†u u h rewrite is‚ú†u-eq u h = bot-is-bot ‚ú†X

  module IUDsame = IntoUnknownDown iDDX iDDX iDDXSelfCompat

  module IUD = IntoUnknownDown iDDX (iDDB cx) iDDXBcompat

  module IUC = IntoUnknownCompat iDDX

  open P.PosetDistr X unknown intoUnkŒµ

  intoUnkŒµ-PosetDistr : PosetDistr
  intoUnkŒµ-PosetDistr = record
    { act-left = Œª {x} {x'} {u} ‚Üí IUDsame.compatDown {x} {x'} {u}
    ; act-right = Œª {x} {u} {u'} ‚Üí IUC.compat (act-right XB) {x} {u} {u'}
    ; distr-hProp = Œª {u} {u'} ‚Üí intoUnkŒµ-hprop {u} {u'} }

  intoUnkŒµ-LeftRepresentable : LeftRepresentable
  intoUnkŒµ-LeftRepresentable = record
    { up = updef
    ; up-repr-from = Œª {x} {u} ‚Üí /elim (Pupfrom x) (auxupfrom x) (quotupfrom x) u
    ; up-repr-to = Œª {x} {u} ‚Üí let ux = up XB .fun x in
      IUD.compatDown {x} {ux} {u} (P.‚äë-up XB x) ‚àò IUC.uinj-uŒµ-inv cx ux u }
    where
      updef = P.mon-‚àò ùï¶inj (up XB)
      Pupfrom = Œª (x : X) (u : unknown) ‚Üí intoUnkŒµ x u ‚Üí uŒµ (uinj cx (up XB .fun x)) u
      auxupfrom : (x : X) (u : Œ£‚Å∫ A B) ‚Üí Pupfrom x ‚¶Ö u ‚¶Ü
      auxupfrom x (inj c' x') cxu with decA cx c'
      ... | yes refl rewrite decA-refl c' = up-repr-from XB cxu
      ... | no h rewrite decA-neq _ _ h = ‚ü¶ (P.up-bot ‚ú†X ‚ú†B XB (unbox cxu)) ‚üß
      auxupfrom x ?Œ£ _ = u?Œµ (uinj cx (up XB .fun x))
      auxupfrom x ‚ú†Œ£ cxu =
        ‚ú†unk .bot-min {uinj cx (up XB .fun x)} {‚ú†u}
                      (toSquashBox (P.up-bot ‚ú†X ‚ú†B XB (unbox cxu)))
      quotupfrom : (x : X) ‚Üí quot-elim (Pupfrom x) (auxupfrom x)
      quotupfrom x c x' h =
        funext (Œª _ ‚Üí uŒµ-hprop {uinj cx (up XB .fun x)} {‚ú†u} _ _)

  intoUnkŒµ-RightRepresentable : RightRepresentable
  intoUnkŒµ-RightRepresentable = record
    { down = downdef
    ; down-repr-from = Œª {x} {u} ‚Üí /elim (Pdownfrom x) (auxdownfrom x) (quotdownfrom x) u
    ; down-repr-to = Œª {x} {u} ‚Üí /elim (Pdownto x) (auxdownto x) (quotdownto x) u }
    where
      downdef = record { fun = from-unknown ; monotone = Œª {u} {u'} ‚Üí from-unknown-mon {u} {u'} }
      Pdownfrom = Œª (x : X) (u : unknown) ‚Üí intoUnkŒµ x u ‚Üí x P.‚äë downdef .fun u
      auxdownfrom : (x : X) (u : Œ£‚Å∫ A B) ‚Üí Pdownfrom x ‚¶Ö u ‚¶Ü
      auxdownfrom x (inj c' x') with decA cx c'
      ... | yes refl rewrite decA-refl c' = down-repr-from XB
      ... | no h rewrite decA-neq _ _ h = Œª cxu ‚Üí bot-min ‚ú†X (unbox cxu)
      auxdownfrom x ?Œ£ _ = top-max ?X (top-is-top ?X)
      auxdownfrom x ‚ú†Œ£ cxu = bot-min ‚ú†X (unbox cxu)
      quotdownfrom : (x : X) ‚Üí quot-elim (Pdownfrom x) (auxdownfrom x)
      quotdownfrom x _ _ _ = funext (Œª _ ‚Üí P.‚äë-hProp {x = x} {downdef .fun ‚ú†u} _ _)


      Pdownto = Œª (x : X) (u : unknown) ‚Üí x P.‚äë downdef .fun u ‚Üí intoUnkŒµ x u
      auxdownto : (x : X) (u : Œ£‚Å∫ A B) ‚Üí Pdownto x ‚¶Ö u ‚¶Ü
      auxdownto x (inj c' x') with decA cx c'
      ... | yes refl rewrite decA-refl c' = down-repr-to XB
      ... | no h rewrite decA-neq _ _ h = Œª h ‚Üí ‚ü¶ (bot-smallest ‚ú†X h (bot-is-bot ‚ú†X)) ‚üß
      auxdownto x ?Œ£ _ = ??max-intoUnkŒµ {x}
      auxdownto x ‚ú†Œ£ xu = ‚ú†min-intoUnkŒµ {x} ‚ú†u (bot-smallest ‚ú†X xu (bot-is-bot ‚ú†X))
      quotdownto : (x : X) ‚Üí quot-elim (Pdownto x) (auxdownto x)
      quotdownto x _ _ _ = funext (Œª _ ‚Üí intoUnkŒµ-hprop {x} {‚ú†u} _ _)


  intoUnkŒµ-isDistr : IsRepresentablePosetDistr
  intoUnkŒµ-isDistr = record
    { isPosetDistr = intoUnkŒµ-PosetDistr
    ; isLeftRepresentable = intoUnkŒµ-LeftRepresentable
    ; isRightRepresentable = intoUnkŒµ-RightRepresentable }

  open import Function

  intoUnkŒµ-Distr : P.ùîªistr (X , PX) ùï¶nknown
  intoUnkŒµ-Distr = record
    { distr = intoUnkŒµ
    ; isDistr = intoUnkŒµ-isDistr
    ; up-down-inverseÀ° = pf }
    where
       pf : InverseÀ° {a = lzero} {A = X} _‚â°_ _‚â°_
            (P.PosetDistr.IsRepresentablePosetDistr.down intoUnkŒµ-isDistr .fun)
            (P.PosetDistr.IsRepresentablePosetDistr.up intoUnkŒµ-isDistr .fun)
       pf rewrite decA-refl cx = Œª x ‚Üí up-down-inverseÀ° XB x

module IntoDistrDownCompat (cx : A) (iDiDX iDiDY : intoDistrData cx) where

  module IDX = IntoDistr cx iDiDX
  module IDY = IntoDistr cx iDiDY

  open I.intoDistrData iDiDX
  open I.intoDistrData iDiDY renaming (X to Y; PX to PY; ‚ú†X to ‚ú†Y; ?X to ?Y ; XB to YB)

  open P

  dX = IDX.intoUnkŒµ-Distr
  dY = IDY.intoUnkŒµ-Distr

  compat : (XY : Distr X Y) (down‚ú†XY : {y : Y} ‚Üí P.is-bot ‚ú†Y y ‚Üí P.is-bot ‚ú†X (XY P.‚Ü° y))
            (H : XB ‚â° ‚àò-Distr XY YB) ‚Üí dX ‚â° ‚àò-Distr XY dY
  compat XY down‚ú†XY H = ùîªistr-ext _ _ (Œª x ‚Üí /elim (P x) (aux x) (quot-helper x))
    where
      box-helper : (x : X) ‚Üí Box (is-bot ‚ú†X x) ‚â° Box (is-bot ‚ú†Y (XY ‚Üü x))
      box-helper x = hpropext Box-hprop Box-hprop (Œª hx ‚Üí ‚ü¶ up-bot ‚ú†X ‚ú†Y XY (unbox hx) ‚üß)
                      Œª hy ‚Üí ‚ü¶ bot-smallest ‚ú†X (down-up-greater XY x) (down‚ú†XY (unbox hy)) ‚üß
      P = Œª (x : X) (u : unknown) ‚Üí ùïïistr dX x u ‚â° ùïïistr (‚àò-Distr XY dY) x u
      aux : (x : X) (u : Œ£‚Å∫ A B) ‚Üí P x ‚¶Ö u ‚¶Ü
      aux x (inj c b) with decA c cx
      ... | yes refl = PE.cong-app (PE.cong-app (cong ùïïistr H) x) b
      ... | no h = box-helper x
      aux x ?Œ£ = PE.refl
      aux x ‚ú†Œ£ = box-helper x

      quot-helper : (x : X) ‚Üí quot-elim (P x) (aux x)
      quot-helper x _ _ _ = hProp-hSet (ùïïistr-hProp dX {x} {‚ú†u}) (ùïïistr-hProp (‚àò-Distr XY dY) {x} {‚ú†u}) _ _

module IntoDistrDownCompatEq (cx cy : A)  (iDiDX : intoDistrData cx) (iDiDY : intoDistrData cy) where

  module IDX = IntoDistr cx iDiDX
  module IDY = IntoDistr cy iDiDY

  open I.intoDistrData iDiDX using (X ; PX ; XB; ‚ú†X)
  open I.intoDistrData iDiDY renaming (X to Y; PX to PY; ‚ú†X to ‚ú†Y; XB to YB)

  open P

  dX = IDX.intoUnkŒµ-Distr
  dY = IDY.intoUnkŒµ-Distr

  compat : (cxy : cx ‚â° cy) (XY : Distr X Y)
            (down‚ú†XY : {y : Y} ‚Üí P.is-bot ‚ú†Y y ‚Üí P.is-bot ‚ú†X (XY P.‚Ü° y))
            (H : subst (Œª c ‚Üí Distr X (B c)) cxy XB ‚â° ‚àò-Distr XY YB) ‚Üí
             dX ‚â° ‚àò-Distr XY dY
  compat PE.refl = IntoDistrDownCompat.compat cx iDiDX iDiDY
